import { Component, Plugin, Setting } from 'obsidian';
import { SettingTab } from 'src/classes/SettingsTab';
import { IPrjSettings as IPrjSettings } from 'src/types/PrjSettings';
import { Inject, TSinjex } from 'ts-injex';
import API from './classes/API';
import Lng from './classes/Lng';
import type IMetadataCache from './interfaces/IMetadataCache';
import { HelperObsidian } from './libs/Helper/Obsidian';
import KanbanSync from './libs/KanbanSync/KanbanSync';
import { LifecycleManager } from './libs/LifecycleManager/LifecycleManager';
import AddAnnotationModal from './libs/Modals/AddAnnotationModal';
import ChangeStatusModal from './libs/Modals/ChangeStatusModal';
import { CreateNewMetadataModal } from './libs/Modals/CreateNewMetadataModal';
import CreateNewNoteModal from './libs/Modals/CreateNewNoteModal';
import CreateNewProjectModal from './libs/Modals/CreateNewProjectModal';
import CreateNewTaskManagementModal from './libs/Modals/CreateNewTaskManagementModal';
import CreateNewTaskModal from './libs/Modals/CreateNewTaskModal';
import { DEFAULT_SETTINGS } from './types/PrjSettings';
// This file is generated by esbuild and imports all classes that use the `Lifecycle` decorator.
import './auto-imports';

/**
 * The main plugin class
 */
export default class Prj extends Plugin {
    public settings: IPrjSettings;
    public api: API = API;

    @Inject('IMetadataCache')
    private readonly _IMetadataCache!: IMetadataCache;

    /**
     * Will be called when the plugin is loaded
     */
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    async onload(): Promise<void> {
        // eslint-disable-next-line no-console
        console.log("Loading plugin 'PRJ'");

        TSinjex.getInstance().register('IPrj', this);
        TSinjex.getInstance().register('IApp', this.app);
        TSinjex.getInstance().register('Obsidian.Component_', Component);
        TSinjex.getInstance().register('Obsidian.Setting_', Setting);

        await this.loadSettings();

        LifecycleManager.register('before', 'init', () => {
            // eslint-disable-next-line no-console
            console.log('Layout ready');
        });

        LifecycleManager.register(
            'on',
            'init',
            async () => await this._IMetadataCache.waitForCacheReady(),
        );

        LifecycleManager.register('after', 'init', () => this.onLayoutReady());

        if (this.app.workspace.layoutReady) {
            await new LifecycleManager().onInit();
        } else {
            this.app.workspace.onLayoutReady(async () => {
                await new LifecycleManager().onInit();
            });
        }
    }

    /**
     * Will be called when the layout is ready
     */
    async onLayoutReady(): Promise<void> {
        // Copy Markdown Link Context Menu
        //CopyMarkdownLink.getInstance();

        // Register Commands and Events
        this.registerCommandsAndEvents();

        /**
         * Run rebuild active view after 500ms
         * This is a workaround for the problem
         * that the plugin is not loaded when the
         * start page is loaded.
         */
        setTimeout(() => {
            // Possibly no longer necessary with the current Obsidian version...
            HelperObsidian.rebuildActiveView();
        }, 500);

        new LifecycleManager().onLoad();
    }

    /**
     * Register the Obsidian Commands an Events
     */
    private registerCommandsAndEvents(): void {
        // Create New Metadata File Command
        CreateNewMetadataModal.registerCommand();

        // Create new Task Managment Command
        CreateNewTaskManagementModal.registerCommand();
        // Create new Task Command
        CreateNewTaskModal.registerCommand();
        // Create new Project Command
        CreateNewProjectModal.registerCommand();
        // Add Annotation Command
        AddAnnotationModal.registerCommand();
        // Add new note Command
        CreateNewNoteModal.registerCommand();

        // Change Status Command
        ChangeStatusModal.registerCommand();

        //
        //Register event on `Status` change..
        this._IMetadataCache.on(
            'prj-task-management-changed-status-event',
            (file) => {
                API.prjTaskManagementModel.syncStatusToPath(file);
            },
        );

        //Register event on `task-file` change..
        this._IMetadataCache.on(
            'prj-task-management-file-changed-event',
            (file) => {
                API.prjTaskManagementModel.syncTitleToFilename(file);
            },
        );

        //Register event on `Document Metadata` change..
        this._IMetadataCache.on('document-changed-metadata-event', (file) => {
            API.documentModel.syncMetadataToFile(file);
        });

        //Register event Kanban Check
        KanbanSync.registerEvent();

        // Register rebuild View command:
        this.addCommand({
            id: 'rebuild-active-view',
            name: Lng.gt('Rebuild active view'),
            /**
             * Rebuild the active view
             */
            callback: async () => {
                HelperObsidian.rebuildActiveView();
            },
        });
    }

    /**
     * Will be called when the plugin is unloaded
     */
    onunload(): void {
        // eslint-disable-next-line no-console
        console.log("Unloading plugin 'PRJ'");
        new LifecycleManager().onUnload();
    }

    /**
     * Load the settings
     */
    async loadSettings(): Promise<void> {
        this.settings = Object.assign(
            {},
            DEFAULT_SETTINGS,
            await this.loadData(),
        );

        TSinjex.getInstance().register('IPrjSettings', this.settings);

        this.addSettingTab(new SettingTab(this.app, this));
    }

    /**
     * Save the settings
     */
    async saveSettings(): Promise<void> {
        await this.saveData(this.settings);
    }
}
