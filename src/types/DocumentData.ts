// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { DocumentModel } from '../models/DocumentModel';
import IPrjData from '../interfaces/IPrjData';
import IPrjDocument from '../interfaces/IPrjDocument';
import { YamlKeyMap } from './YamlKeyMap';
import { FileType, FileSubType } from './PrjTypes';
import { toStringField } from 'src/classes/ToStringFieldDecorator';
import { fieldConfig } from 'src/classes/FieldConfigDecorator';
import BaseData from './BaseData';

/**
 * Represents the data of a document.
 * @see {@link DocumentModel} for the model class.
 */
export default class DocumentData
    extends BaseData<DocumentData>
    implements IPrjData, IPrjDocument
{
    /**
     * The type of the document.
     * @see {@link FileType}
     */
    @fieldConfig('Metadata')
    type: FileType | null | undefined;

    /**
     * The subtype of the document.
     * @see {@link FileSubType}
     */
    @fieldConfig()
    subType: FileSubType | undefined;

    /**
     * The unique identifier of the document.
     * This value is generated by the system and should not be modified.
     */
    @fieldConfig()
    uid: string | null | undefined;

    /**
     * The title of the document.
     * @remarks This value is included in the `toString` output.
     */
    @toStringField
    @fieldConfig()
    title: string | null | undefined;

    /**
     * The date of the document.
     * @remarks This value is included in the `toString` output.
     * @remarks The date should be in the format `YYYY-MM-DD`.
     */
    @toStringField
    @fieldConfig()
    date: string | null | undefined;

    /**
     * The description of the document.
     * @remarks This value is included in the `toString` output.
     */
    @toStringField
    @fieldConfig()
    description: string | null | undefined;

    /**
     * The sender of the document.
     * @remarks This value is included in the `toString` output.
     */
    @toStringField
    @fieldConfig()
    sender: string | null | undefined;

    /**
     * The recipient of the document.
     * @remarks This value is included in the `toString` output.
     */
    @toStringField
    @fieldConfig()
    recipient: string | null | undefined;

    /**
     * The date of delivery of the document.
     * @remarks This value is included in the `toString` output.
     * @remarks The date should be in the format `YYYY-MM-DD`.
     */
    @toStringField
    @fieldConfig()
    dateOfDelivery: string | null | undefined;

    /**
     * A flag indicating if the document should be hidden in the regular view.
     */
    @fieldConfig()
    hide: boolean | null | undefined;

    /**
     * A flag indicating if the PDF path should not be changed automatically.
     */
    @fieldConfig()
    dontChangePdfPath: boolean | null | undefined;

    /**
     * The file of the document as a Obsidian Markdown link.
     * @example `[[file.ext]]`
     * @remarks This value is included in the `toString` output.
     */
    @toStringField
    @fieldConfig()
    file: string | null | undefined;

    /**
     * The related files of the document as a list of Obsidian Markdown links.
     * @example `[["file1.ext", "file2.ext"]]`
     * @remarks This value is included in the `toString` output.
     */
    @toStringField
    @fieldConfig()
    relatedFiles: string[] | null | undefined;

    /**
     * The citation title of the document for footnotes etc.
     */
    @fieldConfig()
    citationTitle: string | null | undefined;

    /**
     * The tags of the document.
     * @remarks This value is included in the `toString` output.
     */
    @toStringField
    @fieldConfig()
    tags: string | string[] | null | undefined;

    /**
     * The annotation target of the document.
     * @remarks This value is used for the `Obsidian Annotator`-Plugin.
     */
    @fieldConfig()
    annotationTarget: string | null | undefined;

    /**
     * The mapping of YAML keys to the corresponding properties.
     */
    static yamlKeyMap: YamlKeyMap = {
        annotationTarget: 'annotation-target',
    };

    /**
     * Creates a new instance of the `DocumentData` class.
     * @param data - The data to use for the creation.
     * - If no data is provided, the default values e.g. `undefined` are used.
     * - If only partial data is provided, the missing values are set to `undefined`.
     */
    constructor(data: Partial<DocumentData>) {
        super(data);
    }
}
